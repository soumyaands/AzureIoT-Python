[
    {
        "label": "IoTHubRegistryManager",
        "importPath": "azure.iot.hub",
        "description": "azure.iot.hub",
        "isExtraImport": true,
        "detail": "azure.iot.hub",
        "documentation": {}
    },
    {
        "label": "IoTHubRegistryManager",
        "importPath": "azure.iot.hub",
        "description": "azure.iot.hub",
        "isExtraImport": true,
        "detail": "azure.iot.hub",
        "documentation": {}
    },
    {
        "label": "ExportImportDevice",
        "importPath": "azure.iot.hub.models",
        "description": "azure.iot.hub.models",
        "isExtraImport": true,
        "detail": "azure.iot.hub.models",
        "documentation": {}
    },
    {
        "label": "AuthenticationMechanism",
        "importPath": "azure.iot.hub.models",
        "description": "azure.iot.hub.models",
        "isExtraImport": true,
        "detail": "azure.iot.hub.models",
        "documentation": {}
    },
    {
        "label": "SymmetricKey",
        "importPath": "azure.iot.hub.models",
        "description": "azure.iot.hub.models",
        "isExtraImport": true,
        "detail": "azure.iot.hub.models",
        "documentation": {}
    },
    {
        "label": "SymmetricKey",
        "importPath": "azure.iot.hub.models",
        "description": "azure.iot.hub.models",
        "isExtraImport": true,
        "detail": "azure.iot.hub.models",
        "documentation": {}
    },
    {
        "label": "AuthenticationMechanism",
        "importPath": "azure.iot.hub.models",
        "description": "azure.iot.hub.models",
        "isExtraImport": true,
        "detail": "azure.iot.hub.models",
        "documentation": {}
    },
    {
        "label": "ExportImportDevice",
        "importPath": "azure.iot.hub.models",
        "description": "azure.iot.hub.models",
        "isExtraImport": true,
        "detail": "azure.iot.hub.models",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "printDeviceInfo",
        "kind": 2,
        "importPath": "Utility.Utilities",
        "description": "Utility.Utilities",
        "peekOfCode": "def printDeviceInfo(dataToPrint,device):\n    print(dataToPrint + \":\")\n    print(\"device_id                      = {0}\".format(device.device_id))\n    print(\"authentication.type            = {0}\".format(device.authentication.type))\n    print(\"authentication.symmetric_key   = {0}\".format(device.authentication.symmetric_key))\n    print(\"authentication.x509_thumbprint = {0}\".format(device.authentication.x509_thumbprint))\n    print(\"connection_state               = {0}\".format(device.connection_state))\n    print(\"connection_state_updated_tTime = {0}\".format(device.connection_state_updated_time))\n    print(\"cloud_to_device_message_count  = {0}\".format(device.cloud_to_device_message_count))\n    print(\"device_scope                   = {0}\".format(device.device_scope))",
        "detail": "Utility.Utilities",
        "documentation": {}
    },
    {
        "label": "addDevice",
        "kind": 2,
        "importPath": "DeviceCreation",
        "description": "DeviceCreation",
        "peekOfCode": "def addDevice(deviceFamily,numberOfDevices):\n    deviceList = []\n    try:\n        for i in range(0,numberOfDevices):\n            primaryKey = base64.b64encode(str(uuid.uuid4()).encode()).decode()\n            secondaryKey = base64.b64encode(str(uuid.uuid4()).encode()).decode()\n            symmetricKey = SymmetricKey(primary_key=primaryKey,secondary_key=secondaryKey)\n            authentication = AuthenticationMechanism(type=\"sas\",symmetric_key=symmetricKey)\n            device = ExportImportDevice(id=\"device\"+i,status=\"enabled\",authentication=authentication)\n            #DEVICE_CREATION",
        "detail": "DeviceCreation",
        "documentation": {}
    },
    {
        "label": "getDevice",
        "kind": 2,
        "importPath": "DeviceCreation",
        "description": "DeviceCreation",
        "peekOfCode": "def getDevice(numberOfDevices):\n    try:\n        deviceList = iothub_registry_manager.get_devices(numberOfDevices)\n        if deviceList:\n            devicePos = 0\n            for device in deviceList:\n                printDeviceInfo(\"{0}th device\".format(devicePos),device)\n                devicePos+=1\n        else:\n            print(\"No Devices Found\")",
        "detail": "DeviceCreation",
        "documentation": {}
    },
    {
        "label": "deleteDevice",
        "kind": 2,
        "importPath": "DeviceCreation",
        "description": "DeviceCreation",
        "peekOfCode": "def deleteDevice(deviceName):\n    try:\n        device = ExportImportDevice(id=deviceName,status=\"enabled\",authentication=authentication)\n        device.import_mode = \"delete\"\n        iothub_registry_manager.bulk_create_or_update_devices(device)\n    except Exception as e:\n        print(\"Some Exception Description : {0}\".format(e))",
        "detail": "DeviceCreation",
        "documentation": {}
    },
    {
        "label": "iothub_connection_string",
        "kind": 5,
        "importPath": "DeviceCreation",
        "description": "DeviceCreation",
        "peekOfCode": "iothub_connection_string = os.getenv(\"IOTHUB_CONNECTION_STRING\")\niothub_registry_manager = IoTHubRegistryManager.from_connection_string(iothub_connection_string)\ndef addDevice(deviceFamily,numberOfDevices):\n    deviceList = []\n    try:\n        for i in range(0,numberOfDevices):\n            primaryKey = base64.b64encode(str(uuid.uuid4()).encode()).decode()\n            secondaryKey = base64.b64encode(str(uuid.uuid4()).encode()).decode()\n            symmetricKey = SymmetricKey(primary_key=primaryKey,secondary_key=secondaryKey)\n            authentication = AuthenticationMechanism(type=\"sas\",symmetric_key=symmetricKey)",
        "detail": "DeviceCreation",
        "documentation": {}
    },
    {
        "label": "iothub_registry_manager",
        "kind": 5,
        "importPath": "DeviceCreation",
        "description": "DeviceCreation",
        "peekOfCode": "iothub_registry_manager = IoTHubRegistryManager.from_connection_string(iothub_connection_string)\ndef addDevice(deviceFamily,numberOfDevices):\n    deviceList = []\n    try:\n        for i in range(0,numberOfDevices):\n            primaryKey = base64.b64encode(str(uuid.uuid4()).encode()).decode()\n            secondaryKey = base64.b64encode(str(uuid.uuid4()).encode()).decode()\n            symmetricKey = SymmetricKey(primary_key=primaryKey,secondary_key=secondaryKey)\n            authentication = AuthenticationMechanism(type=\"sas\",symmetric_key=symmetricKey)\n            device = ExportImportDevice(id=\"device\"+i,status=\"enabled\",authentication=authentication)",
        "detail": "DeviceCreation",
        "documentation": {}
    }
]